---
name: "Quality"
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  check-quality:
    permissions:
      actions: "write"
    runs-on: "ubuntu-latest"
    steps:
      # setup
      - uses: "nixbuild/nix-quick-install-action@5bb6a3b3abe66fd09bbf250dce8ada94f856a703" # v30
      - uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683" # v4
      - uses: "nix-community/cache-nix-action@c448f065ba14308da81de769632ca67a3ce67cf5" # v6
        with:
          primary-key: "cache-nix-store-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}"
          restore-prefixes-first-match: "cache-nix-store-${{ runner.os }}-"
          gc-max-store-size-linux: 1073741824 # 1go
          purge: true
          purge-prefixes: "cache-nix-store-${{ runner.os }}-"
          purge-created: 0
          purge-primary-key: "never"
      - uses: "cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad" # v16
        with:
          name: "krostar"
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: "Print nix version"
        run: "nix --version"
      - name: "Print flake metadata"
        run: "nix flake metadata"
      - name: "Setup shell"
        run: "nix develop --command true"

      # tests
      - uses: "DeterminateSystems/flake-checker-action@078f5f7f47ee188aa6cb472527ca5984e195222d" # v9
        with:
          fail-mode: true
          ignore-missing-flake-lock: false
          nixpkgs-keys: "nixpkgs"
          send-statistics: false

      - name: "Flake check"
        run: "nix flake check --all-systems --print-build-logs"

      - name: "Files respect Editorconfig configuration"
        run: "nix develop --command lint-editorconfig"

      - name: "Files respect treefmt format"
        run: "nix develop --command treefmt --no-cache --fail-on-change"

      - name: "Lint Github Actions"
        run: "nix develop --command lint-ghaction"

      - name: "Lint Shell scripts"
        run: "nix develop --command lint-sh"

      - name: "Lint YAML configurations files"
        run: "nix develop --command lint-yaml"

      - name: "Lint Go code"
        run: "nix develop --command lint-go"

      - name: "Lint Nix code"
        run: "nix develop --command lint-nix"

      - name: "Run go unit tests"
        run: "nix develop --command go test -v -race -count 10 -failfast -timeout 45s -shuffle on ./..."
